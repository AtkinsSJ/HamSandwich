#!/bin/bash
# ./run - build then run a project in the appropriate directory
set -euo pipefail

show_help() {
	echo "Usage: $0 <project> [--release] [--gdb] [--fullscreen] [--nobuild] [--clang]"
	echo "Available projects:"
	echo "    lunatic    supreme     sleepless"
	echo "    loonyland  loonyland2  mystic"
}

# Default settings
USE_GDB=
PROJECT=
CONFIG=debug
ARGS=window
NOBUILD=
TOOLSET=gcc

# Read command-line arguments
while [ $# -ne 0 ]; do
	ARG="$1"; shift
	case "$ARG" in
		"--fullscreen")
			ARGS=
			;;
		"--release")
			CONFIG=release
			;;
		"--gdb")
			USE_GDB=ON
			;;
		"--nobuild")
			NOBUILD=ON
			;;
		"--clang")
			TOOLSET=clang
			;;
		-*)
			show_help; exit 1
			;;
		*)
			if [ $PROJECT ]; then
				# Exit if two projects were specified
				show_help; exit 1
			fi
			PROJECT=$ARG
			;;
	esac
done
if [ -z $PROJECT ]; then
	# Exit if no project was specified
	show_help; exit 1
fi

# Ensure all dependencies are installed
./tools/build/install-deps.sh

# Ensure the project's build is up to date
if [ -z "$NOBUILD" ]; then
	make $PROJECT config=$CONFIG toolset=$TOOLSET
fi

# Ensure the project's assets exist
GAMEDIR="build/game/$PROJECT"
if [ ! -d "$GAMEDIR" ]; then
	./tools/build/extract-assets.sh "$PROJECT"
fi

# Run the project
EXE="$PWD/build/$TOOLSET-$CONFIG/$PROJECT/$PROJECT"
cd "$GAMEDIR"
if [ $USE_GDB ]; then
	echo "==== Debugging $PROJECT ($CONFIG) ===="
	gdb -q -ex 'break abort' --args "$EXE" $ARGS
else
	echo "==== Running $PROJECT ($CONFIG) ===="
	"$EXE" $ARGS
fi
